#!/usr/bin/env kotlin

/**
 * –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ç—á–µ—Ä —Å –Ω–∞–¥—ë–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
 * 
 * –§–æ—Ä–º–∞—Ç –ø–∞—Ç—á–∞:
 * 
 * === PATCH START ===
 * NAME: Fix Windows interrupt
 * DESCRIPTION: –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É Ctrl+C
 * AUTHOR: DevOps
 * VERSION: 1.0
 * 
 * --- FILE: src/main/kotlin/Example.kt ---
 * ACTION: replace
 * DESCRIPTION: –ó–∞–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞
 * 
 * <<< FIND
 * fun oldMethod() {
 *     println("old")
 * }
 * FIND >>>
 * 
 * <<< REPLACE
 * fun newMethod() {
 *     println("new")
 * }
 * REPLACE >>>
 * 
 * --- FILE: old/path/file.kt ---
 * ACTION: move_file
 * DESCRIPTION: –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª
 * 
 * <<< TO
 * new/path/file.kt
 * TO >>>
 * 
 * === PATCH END ===
 */

import java.io.File

data class PatchMetadata(
    val name: String,
    val description: String,
    val author: String,
    val version: String
)

sealed class PatchAction {
    data class Replace(val find: String, val replace: String) : PatchAction()
    data class InsertBefore(val marker: String, val content: String) : PatchAction()
    data class InsertAfter(val marker: String, val content: String) : PatchAction()
    data class Delete(val find: String) : PatchAction()
    data class CreateFile(val content: String) : PatchAction()
    data class DeleteFile(val confirm: Boolean = false) : PatchAction()
    data class MoveFile(val destination: String, val overwrite: Boolean = false) : PatchAction()
}

data class FilePatch(
    val file: String,
    val description: String,
    val action: PatchAction
)

enum class PatchStatus {
    SUCCESS, SKIPPED, FAILED, FILE_NOT_FOUND
}

data class FilePatchResult(
    val file: String,
    val status: PatchStatus,
    val error: String? = null
)

class RobustPatcher(private val baseDir: File = File(".")) {
    
    private val stats = mutableMapOf<String, Int>()
    
    fun applyPatch(patchContent: String, dryRun: Boolean = false) {
        val (metadata, patches) = parsePatch(patchContent)
        
        println("=".repeat(70))
        println("üì¶ –ü–∞—Ç—á: ${metadata.name}")
        println("üìù –û–ø–∏—Å–∞–Ω–∏–µ: ${metadata.description}")
        println("üë§ –ê–≤—Ç–æ—Ä: ${metadata.author}")
        println("üî¢ –í–µ—Ä—Å–∏—è: ${metadata.version}")
        if (dryRun) {
            println("üîç –†–µ–∂–∏–º: DRY RUN (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)")
        }
        println("=".repeat(70))
        println()
        
        patches.forEachIndexed { index, filePatch ->
            println("[${index + 1}/${patches.size}] üìÑ ${filePatch.file}")
            println("    ‚ûú ${filePatch.description}")
            
            val result = applyFilePatch(filePatch, dryRun)
            
            when (result.status) {
                PatchStatus.SUCCESS -> {
                    println("    ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω")
                    stats.merge("success", 1, Int::plus)
                }
                PatchStatus.SKIPPED -> {
                    println("    ‚≠êÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω: ${result.error}")
                    stats.merge("skipped", 1, Int::plus)
                }
                PatchStatus.FAILED -> {
                    println("    ‚ùå –û—à–∏–±–∫–∞: ${result.error}")
                    stats.merge("failed", 1, Int::plus)
                }
                PatchStatus.FILE_NOT_FOUND -> {
                    println("    ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    stats.merge("failed", 1, Int::plus)
                }
            }
            println()
        }
        
        printSummary(dryRun)
    }
    
    private fun applyFilePatch(filePatch: FilePatch, dryRun: Boolean): FilePatchResult {
        val file = File(baseDir, filePatch.file)
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è create_file, delete_file –∏ move
        when (val action = filePatch.action) {
            is PatchAction.CreateFile -> {
                if (file.exists()) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.SKIPPED,
                        error = "–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    )
                }
                
                if (!dryRun) {
                    try {
                        file.parentFile?.mkdirs()
                        file.writeText(action.content)
                    } catch (e: Exception) {
                        return FilePatchResult(
                            file = filePatch.file,
                            status = PatchStatus.FAILED,
                            error = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${e.message}"
                        )
                    }
                }
                
                return FilePatchResult(
                    file = filePatch.file,
                    status = PatchStatus.SUCCESS
                )
            }
            
            is PatchAction.DeleteFile -> {
                if (!file.exists()) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.SKIPPED,
                        error = "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    )
                }
                
                if (!action.confirm) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.FAILED,
                        error = "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è (CONFIRM: true)"
                    )
                }
                
                if (!dryRun) {
                    try {
                        val backupFile = File(file.absolutePath + ".deleted")
                        file.copyTo(backupFile, overwrite = true)
                        file.delete()
                    } catch (e: Exception) {
                        return FilePatchResult(
                            file = filePatch.file,
                            status = PatchStatus.FAILED,
                            error = "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${e.message}"
                        )
                    }
                }
                
                return FilePatchResult(
                    file = filePatch.file,
                    status = PatchStatus.SUCCESS
                )
            }
            
            is PatchAction.MoveFile -> {
                if (!file.exists()) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.FILE_NOT_FOUND,
                        error = "–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    )
                }
                
                val destination = File(baseDir, action.destination)
                
                if (destination.exists() && !action.overwrite) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.FAILED,
                        error = "–§–∞–π–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ OVERWRITE: true)"
                    )
                }
                
                if (!dryRun) {
                    try {
                        destination.parentFile?.mkdirs()
                        
                        // –°–æ–∑–¥–∞—ë–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –µ—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
                        if (destination.exists()) {
                            val backupFile = File(destination.absolutePath + ".backup")
                            destination.copyTo(backupFile, overwrite = true)
                        }
                        
                        file.copyTo(destination, overwrite = true)
                        file.delete()
                    } catch (e: Exception) {
                        return FilePatchResult(
                            file = filePatch.file,
                            status = PatchStatus.FAILED,
                            error = "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ${e.message}"
                        )
                    }
                }
                
                return FilePatchResult(
                    file = filePatch.file,
                    status = PatchStatus.SUCCESS
                )
            }
            
            else -> {
                // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                if (!file.exists()) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.FILE_NOT_FOUND,
                        error = "–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                    )
                }
            }
        }
        
        val content = file.readText()
        val newContent = when (val action = filePatch.action) {
            is PatchAction.Replace -> {
                if (!content.contains(action.find)) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.SKIPPED,
                        error = "–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å–∫–æ–º–æ–≥–æ: ${action.find.take(50).replace("\n", "\\n")}"
                    )
                }
                content.replace(action.find, action.replace)
            }
            
            is PatchAction.InsertBefore -> {
                if (!content.contains(action.marker)) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.SKIPPED,
                        error = "–ú–∞—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                }
                content.replace(action.marker, action.content + "\n" + action.marker)
            }
            
            is PatchAction.InsertAfter -> {
                if (!content.contains(action.marker)) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.SKIPPED,
                        error = "–ú–∞—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                }
                content.replace(action.marker, action.marker + "\n" + action.content)
            }
            
            is PatchAction.Delete -> {
                if (!content.contains(action.find)) {
                    return FilePatchResult(
                        file = filePatch.file,
                        status = PatchStatus.SKIPPED,
                        error = "–ë–ª–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                }
                content.replace(action.find, "")
            }
            
            else -> content
        }
        
        if (newContent == content) {
            return FilePatchResult(
                file = filePatch.file,
                status = PatchStatus.SKIPPED,
                error = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"
            )
        }
        
        if (!dryRun) {
            try {
                file.writeText(newContent)
            } catch (e: Exception) {
                return FilePatchResult(
                    file = filePatch.file,
                    status = PatchStatus.FAILED,
                    error = "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: ${e.message}"
                )
            }
        }
        
        return FilePatchResult(
            file = filePatch.file,
            status = PatchStatus.SUCCESS
        )
    }
    
    private fun parsePatch(content: String): Pair<PatchMetadata, List<FilePatch>> {
        val lines = content.lines()
        var i = 0
        
        // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –ø–∞—Ç—á–∞
        while (i < lines.size && lines[i].trim() != "=== PATCH START ===") {
            i++
        }
        i++ // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å PATCH START
        
        // –ü–∞—Ä—Å–∏–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        val metadata = mutableMapOf<String, String>()
        while (i < lines.size) {
            val line = lines[i].trim()
            if (line.isEmpty() || line.startsWith("---")) break
            
            if (line.contains(":")) {
                val (key, value) = line.split(":", limit = 2)
                metadata[key.trim()] = value.trim()
            }
            i++
        }
        
        val patchMetadata = PatchMetadata(
            name = metadata["NAME"] ?: "Unnamed",
            description = metadata["DESCRIPTION"] ?: "",
            author = metadata["AUTHOR"] ?: "Unknown",
            version = metadata["VERSION"] ?: "1.0"
        )
        
        // –ü–∞—Ä—Å–∏–º –ø–∞—Ç—á–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
        val patches = mutableListOf<FilePatch>()
        
        while (i < lines.size) {
            val line = lines[i].trim()
            
            if (line == "=== PATCH END ===") break
            
            if (line.startsWith("--- FILE:")) {
                val file = line.substringAfter("--- FILE:").substringBefore("---").trim()
                i++
                
                // –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ç—á–∞
                var action = ""
                var description = ""
                
                while (i < lines.size) {
                    val paramLine = lines[i].trim()
                    if (paramLine.startsWith("<<<")) break
                    
                    when {
                        paramLine.startsWith("ACTION:") -> action = paramLine.substringAfter(":").trim()
                        paramLine.startsWith("DESCRIPTION:") -> description = paramLine.substringAfter(":").trim()
                    }
                    i++
                }
                
                // –ß–∏—Ç–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                val blocks = mutableMapOf<String, String>()
                
                while (i < lines.size) {
                    val blockLine = lines[i].trim()
                    
                    if (blockLine.startsWith("---") || blockLine == "=== PATCH END ===") break
                    
                    if (blockLine.startsWith("<<<")) {
                        val blockType = blockLine.substring(3).trim()
                        i++
                        
                        val blockContent = StringBuilder()
                        while (i < lines.size) {
                            val contentLine = lines[i]
                            if (contentLine.trim().endsWith("$blockType >>>")) {
                                break
                            }
                            blockContent.append(contentLine).append("\n")
                            i++
                        }
                        
                        blocks[blockType] = blockContent.toString().trimEnd()
                        i++
                    } else {
                        i++
                    }
                }
                
                // –°–æ–∑–¥–∞—ë–º –ø–∞—Ç—á
                val patchAction = when (action.lowercase()) {
                    "replace" -> PatchAction.Replace(
                        find = blocks["FIND"] ?: throw IllegalArgumentException("Missing FIND block"),
                        replace = blocks["REPLACE"] ?: throw IllegalArgumentException("Missing REPLACE block")
                    )
                    "insert_before" -> PatchAction.InsertBefore(
                        marker = blocks["MARKER"] ?: throw IllegalArgumentException("Missing MARKER block"),
                        content = blocks["CONTENT"] ?: throw IllegalArgumentException("Missing CONTENT block")
                    )
                    "insert_after" -> PatchAction.InsertAfter(
                        marker = blocks["MARKER"] ?: throw IllegalArgumentException("Missing MARKER block"),
                        content = blocks["CONTENT"] ?: throw IllegalArgumentException("Missing CONTENT block")
                    )
                    "delete" -> PatchAction.Delete(
                        find = blocks["FIND"] ?: throw IllegalArgumentException("Missing FIND block")
                    )
                    "create_file" -> PatchAction.CreateFile(
                        content = blocks["CONTENT"] ?: throw IllegalArgumentException("Missing CONTENT block")
                    )
                    "delete_file" -> {
                        val confirmStr = blocks["CONFIRM"]?.trim()?.lowercase()
                        PatchAction.DeleteFile(
                            confirm = confirmStr == "true" || confirmStr == "yes"
                        )
                    }
                    "move_file" -> {
                        val overwriteStr = blocks["OVERWRITE"]?.trim()?.lowercase()
                        PatchAction.MoveFile(
                            destination = blocks["TO"] ?: throw IllegalArgumentException("Missing TO block"),
                            overwrite = overwriteStr == "true" || overwriteStr == "yes"
                        )
                    }
                    else -> throw IllegalArgumentException("Unknown action: $action")
                }
                
                patches.add(FilePatch(file, description, patchAction))
            } else {
                i++
            }
        }
        
        return Pair(patchMetadata, patches)
    }
    
    private fun printSummary(dryRun: Boolean) {
        println("=".repeat(70))
        println("üìä –ò–¢–û–ì–ò")
        println("=".repeat(70))
        println("‚úÖ –£—Å–ø–µ—à–Ω–æ:          ${stats["success"] ?: 0}")
        println("‚≠êÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ:        ${stats["skipped"] ?: 0}")
        println("‚ùå –û—à–∏–±–∫–∏:           ${stats["failed"] ?: 0}")
        println("=".repeat(70))
        
        if (dryRun) {
            println()
            println("üí° –≠—Ç–æ –±—ã–ª –ø—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–µ–∑ --dry-run –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        }
    }
}

// Main execution
if (args.isEmpty()) {
    println("""
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: kotlinc -script RobustPatcher.kts -- <patch-file> [--dry-run]
        
        –ü—Ä–∏–º–µ—Ä—ã:
            kotlinc -script RobustPatcher.kts -- fix.patch
            kotlinc -script RobustPatcher.kts -- fix.patch --dry-run
            
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (ACTION):
            - replace: –ó–∞–º–µ–Ω–∞ —Ç–µ–∫—Å—Ç–∞
            - insert_before: –í—Å—Ç–∞–≤–∫–∞ –ø–µ—Ä–µ–¥ –º–∞—Ä–∫–µ—Ä–æ–º
            - insert_after: –í—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–∞
            - delete: –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
            - create_file: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            - delete_file: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Ç—Ä–µ–±—É–µ—Ç CONFIRM: true)
            - move_file: –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ/–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–±–ª–æ–∫ TO)
    """.trimIndent())
} else {
    val patchFilePath = args[0]
    val dryRun = args.contains("--dry-run")
    
    val patchFile = File(patchFilePath)
    if (!patchFile.exists()) {
        println("‚ùå –§–∞–π–ª –ø–∞—Ç—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $patchFilePath")
    } else {
        println("üìÇ –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${File(".").absolutePath}")
        println("üìÑ –§–∞–π–ª –ø–∞—Ç—á–∞: ${patchFile.absolutePath}")
        println()
        
        val patcher = RobustPatcher(File("."))
        val patchContent = patchFile.readText()
        
        try {
            patcher.applyPatch(patchContent, dryRun)
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞: ${e.message}")
            e.printStackTrace()
        }
    }
}